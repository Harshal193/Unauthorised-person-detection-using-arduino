/* 
 * 
   Unauthorized Person Detection System Using Arduino
 *
 * Please visit http://www.ArduinoLearningBoard.com for more information
 
 */

/*
VCC  -> 5V
Trig -> D2
Echo -> D4
GND  -> GND
PIR O/P-> D5
*/

#define trigPin 2 // Which digital (output) pin will we trigger the pulse on
#define echoPin 4 // Which digital (input) pin will we listen for echo on

long duration;     // Duration used to calculate distance
float inches, cm;

int ledPin = 5;
int pirPin = 7;
int pirValue;

#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN         9          // Configurable, see typical pin layout above
#define SS_PIN          10         // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance


void setup()
{pinMode(ledPin, OUTPUT);
pinMode(pirPin, INPUT);

digitalWrite(ledPin, LOW);
  
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.begin(9600);    // Initialize serial communications with the PC
  while (!Serial);    // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  mfrc522.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
}

void loop()
{
pirValue = digitalRead(pirPin);
digitalWrite(ledPin, pirValue);
Serial.println("output");
Serial.println(pirValue);
  
  if (pirValue=1)
  {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Call pulseIn function to wait for High pulse
  // result will be time in microseconds until pulse is detected
  duration = pulseIn(echoPin, HIGH);

  inches = microSecondsToInches(duration); 
    cm = microSecondsToCentimeters(duration);

    Serial.print("Ping Time: ");
    Serial.print(duration);
    Serial.print("uS, ");
    Serial.print(cm);
    Serial.print("cm, ");
    Serial.print(inches);
    Serial.println("in");
   }
 delay(1000); 
}
float microSecondsToInches(long microseconds)
{
  // Sound travels at 1125 feet per second
  // or 74.642 microseconds per inch
  // This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  return microseconds / 74.642 / 2.0;
}

float microSecondsToCentimeters(long microseconds)
{
  // Sound travels at 1125 feet per second
  // or 29.386 microseconds per centimeter
  // This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  return microseconds / 29.387 / 2.0;
}
