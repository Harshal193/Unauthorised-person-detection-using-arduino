/* 
 * 
   Unauthorized Person Detection System Using Arduino
 *
 * Please visit http://www.ArduinoLearningBoard.com for more information
 
 */

/*
VCC  -> 5V
Trig -> D3
Echo -> D4
GND  -> GND
PIR O/P-> D2
buzzer->A4
pir_led->A3
RFID-> RST- A2
LCD-> RST-A0,E-A1
BUZZER->A4,PIR_LED->A3
*/

#define trigPin 2 // Which digital (output) pin will we trigger the pulse on
#define echoPin 4 // Which digital (input) pin will we listen for echo on

long duration;     // Duration used to calculate distance
float inches, cm;

int pirled = A3;
int pirPin = 2;

int buzzer = A4;
int pirValue;

#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

// initialize the library with the numbers of the interface pins
//            (RST,E,D4,D5,D6,D7)
LiquidCrystal lcd(A0, A1, 8, 7, 6, 5);

#define RST_PIN         A2          // Configurable, see typical pin layout above
#define SS_PIN          10         // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance


void setup()
{Serial.begin(9600);
// set up the LCD's number of columns and rows:
 lcd.begin(16, 2);
 while(!Serial);
 SPI.begin();
 mfrc522.PCD_Init();
 pinMode(buzzer,OUTPUT);
 pinMode(pirled, OUTPUT);

 pinMode(pirPin, INPUT);
 digitalWrite(pirled, LOW);
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.begin(9600);    // Initialize serial communications with the PC
  while (!Serial);    // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  mfrc522.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
}

void dump_byte_array(byte *buffer, byte bufferSize)
{
  read_rfid="";
  for(byte i = 0;i < bufferSize; i++)
  {
    read_rfid=read_rfid + String(buffer[i],HEX);
  }
}

void alarm()
{
  digitalWrite(buzzer,HIGH);
  delay(2000);
  digitalWrite(buzzer,LOW);
}

void loop()
{
pirValue = digitalRead(pirPin);
digitalWrite(ledPin, pirValue);
Serial.println("output");
Serial.println(pirValue);
  
  if (pirValue=1)
  {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

// Call pulseIn function to wait for High pulse
  // result will be time in microseconds until pulse is detected
  duration = pulseIn(echoPin, HIGH);

   cm = microSecondsToCentimeters(duration);
   // set the cursor to column 0, line 1
   // (note: line 1 is the second row, since counting begins with 0):
   lcd.setCursor(0, 0);
   lcd.print("PERSON_PRESENT     ");
   delay(200);
   lcd.print("SHOW_YOUR_RFID");
   
   
  // lcd.print(pirValue);
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
    lcd.setCursor(0, 1);
      lcd.print("DISTANCE");
      lcd.print(cm);
      lcd.setCursor(14, 1);
      lcd.print("cm");


     if( ! mfrc522.PICC_IsNewCardPresent())
  return;
   if( ! mfrc522.PICC_ReadCardSerial())
  return;
  dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
  if (read_rfid==ok_rfid_1)
  {
     // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 0);
    //lcd.print(ok_rfid_1);
    lcd.print("PERSON_AUTHORIZED     ");
  }
 else
 {
   // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 0);
  lcd.print("NOT_AUTHORIZED     ");
    alarm();
 }
   //   Serial.print("Ping Time: ");
   //  Serial.print(duration);
   //  Serial.print("uS, ");
   // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  //  lcd.setCursor(0, 1);
  //    lcd.print("DISTANCE");
  //  lcd.print(cm);
}
   if(pirValue==0)
   {
     // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 0);
  lcd.print("PERSON_ABSENT      ");
   lcd.setCursor(0, 1);
     lcd.print("                ");

   }
 delay(1000); 
 }
float microSecondsToCentimeters(long microseconds)
{
  // Sound travels at 1125 feet per second
  // or 29.386 microseconds per centimeter
  // This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  return microseconds / 29.387 / 2.0;
}
